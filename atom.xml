<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hexo]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://crazyhoney.github.io/"/>
  <updated>2016-03-24T02:38:03.586Z</updated>
  <id>http://crazyhoney.github.io/</id>
  
  <author>
    <name><![CDATA[wayne Hao]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hive的复合类型UNION]]></title>
    <link href="http://crazyhoney.github.io/2016/03/24/Hive%E7%9A%84%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8BUNION/"/>
    <id>http://crazyhoney.github.io/2016/03/24/Hive的复合类型UNION/</id>
    <published>2016-03-24T02:27:05.000Z</published>
    <updated>2016-03-24T02:38:03.586Z</updated>
    <content type="html"><![CDATA[<p>这两天正在学Hive,学习到了复合数据类型ARRAY,MAP,STRUCT。</p>
<h2 id="u7A81_u7136_u60F3_u5230"><a href="#u7A81_u7136_u60F3_u5230" class="headerlink" title="突然想到"></a>突然想到</h2><p>能不能把许多类型放在一起，用上面的类型嵌套，始终不太得劲。所以查了查，发现有个UNION类型好像可以干这个事。<br>百度之，资料不多，没啥用处。就找到了官网文档。</p>
<p>如下：</p>
<p><img src="http://ww2.sinaimg.cn/large/75544e9fjw1f27r1rj8dhj20t60gptdt.jpg" alt=""></p>
<p><strong>This means that UNIONTYPEs are effectively look-at-only.</strong></p>
<p>这个类型目前只能看啊！卧槽◔ ‸◔?<br>没啥实际作用！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这两天正在学Hive,学习到了复合数据类型ARRAY,MAP,STRUCT。</p>
<h2 id="u7A81_u7136_u60F3_u5230"><a href="#u7A81_u7136_u60F3_u5230" class="headerlink" title="]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java的IO流]]></title>
    <link href="http://crazyhoney.github.io/2016/03/18/Java%E7%9A%84IO%E6%B5%81/"/>
    <id>http://crazyhoney.github.io/2016/03/18/Java的IO流/</id>
    <published>2016-03-18T11:19:46.000Z</published>
    <updated>2016-03-18T11:20:45.219Z</updated>
    <content type="html"><![CDATA[<p>//有时间再排版吧，累觉不爱 3/18</p>
<h1 id="u4E00_u3001Java_u7684_u6D41_uFF1A"><a href="#u4E00_u3001Java_u7684_u6D41_uFF1A" class="headerlink" title="一、Java的流："></a>一、Java的流：</h1><blockquote>
<ul>
<li>各种各样的流对应各种各样的管道，它们有些可以套在一起使用。</li>
</ul>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/75544e9fjw1f214xcgrxkj20qk04nac5.jpg" alt=""></p>
<h1 id="u4E8C_u3001_u5206_u7C7B_uFF1A"><a href="#u4E8C_u3001_u5206_u7C7B_uFF1A" class="headerlink" title="二、分类："></a>二、分类：</h1><blockquote>
<ul>
<li>输入流，输出流——-文件的流向不同</li>
</ul>
</blockquote>
<h2 id="u8F93_u5165_u6D41_3A_u8FDB_u5165_u7A0B_u5E8F_28_u5199_u7684_u4EE3_u7801_29"><a href="#u8F93_u5165_u6D41_3A_u8FDB_u5165_u7A0B_u5E8F_28_u5199_u7684_u4EE3_u7801_29" class="headerlink" title="<strong>输入流:进入程序(写的代码)</strong>"></a><strong>输入流:进入程序(写的代码)</strong></h2><h2 id="u8F93_u51FA_u6D41_3A_u4ECE_u7A0B_u5E8F_28_u5199_u7684_u4EE3_u7801_29_u51FA_u53BB"><a href="#u8F93_u51FA_u6D41_3A_u4ECE_u7A0B_u5E8F_28_u5199_u7684_u4EE3_u7801_29_u51FA_u53BB" class="headerlink" title="<strong>输出流:从程序(写的代码)出去</strong>"></a><strong>输出流:从程序(写的代码)出去</strong></h2><blockquote>
<ul>
<li><p>字节流，字符流——-处理的数据单位不同</p>
</li>
<li><p>节点流，处理流——-功能不同</p>
</li>
</ul>
</blockquote>
<p>节点流：<strong>流</strong>(管道)直接怼到<strong>文件</strong>(水桶)上的流。</p>
<p>处理流：包在别的<strong>流</strong>(管道)上面的<strong>流</strong>(管道)。</p>
<h2 id="u51E1_u662F_u4EE5stream_u7ED3_u5C3E_u7684_u90FD_u662F_u5B57_u8282_u6D41"><a href="#u51E1_u662F_u4EE5stream_u7ED3_u5C3E_u7684_u90FD_u662F_u5B57_u8282_u6D41" class="headerlink" title="<strong>凡是以stream结尾的都是字节流</strong>"></a><strong>凡是以stream结尾的都是字节流</strong></h2><h1 id="u4E09_u3001_u8282_u70B9_u6D41"><a href="#u4E09_u3001_u8282_u70B9_u6D41" class="headerlink" title="三、节点流"></a>三、节点流</h1><h2 id="1_u3001FileInputStream"><a href="#1_u3001FileInputStream" class="headerlink" title="1、FileInputStream"></a>1、FileInputStream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileInputStream</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      in = <span class="keyword">new</span> FileInputStream(<span class="string">"d:\\share\\java\\io\\TestFileInputStream.java"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"找不到指定文件"</span>);</span><br><span class="line">      System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>((b=in.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//b!=-1相当于这个文件还没有读到结尾</span></span><br><span class="line">        System.out.print((<span class="keyword">char</span>)b);</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">      in.close();  </span><br><span class="line">      System.out.println();</span><br><span class="line">      System.out.println(<span class="string">"共读取了 "</span>+num+<span class="string">" 个字节"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">      System.out.println(<span class="string">"文件读取错误"</span>); System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个程序执行结束后，读出的文件，如果有中文，则会显示乱码。因为它是一个字节字节地读，而中文占用的不止一个字节。</p>
<h2 id="2_u3001FileOutputStream"><a href="#2_u3001FileOutputStream" class="headerlink" title="2、FileOutputStream"></a>2、FileOutputStream</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileOutputStream</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	  <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">	  FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">	  FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">	  <span class="keyword">try</span> &#123;</span><br><span class="line">	    in = <span class="keyword">new</span> FileInputStream(<span class="string">"e:/javatest/testfile.java"</span>);</span><br><span class="line">	    out = <span class="keyword">new</span> FileOutputStream(<span class="string">"e:/javatest/8/HWJ.java"</span>);</span><br><span class="line">	    <span class="keyword">while</span>((b=in.read())!=-<span class="number">1</span>)&#123;<span class="comment">//in这个管道在从文件里面读数据</span></span><br><span class="line">	    	System.out.print((<span class="keyword">char</span>)b);</span><br><span class="line">	      out.write(b);<span class="comment">//out这个管道在向文件里面“灌”数据</span></span><br><span class="line">	    &#125;</span><br><span class="line">	    in.close();</span><br><span class="line">	    out.close();</span><br><span class="line">	  &#125; <span class="keyword">catch</span> (FileNotFoundException e2) &#123;</span><br><span class="line">	    System.out.println(<span class="string">"找不到指定文件"</span>); System.exit(-<span class="number">1</span>);</span><br><span class="line">	  &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">	    System.out.println(<span class="string">"文件复制错误"</span>); System.exit(-<span class="number">1</span>);</span><br><span class="line">	  &#125;</span><br><span class="line">	  System.out.println(<span class="string">"文件已复制"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FileOutputStream(path,append):如果第二个参数写为true，则可以向文件后面追加。</p>
<h2 id="3_u3001FileReader"><a href="#3_u3001FileReader" class="headerlink" title="3、FileReader"></a>3、FileReader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileReader</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fr = <span class="keyword">new</span> FileReader(<span class="string">"e:\\javatest\\8\\io\\TestFileReader.java"</span>);</span><br><span class="line">      <span class="keyword">int</span> ln = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span> ((c = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print((<span class="keyword">char</span>)c);</span><br><span class="line">      &#125;</span><br><span class="line">      fr.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"找不到指定文件"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"文件读取错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个程序执行结束，如果文件里面有中文，则会完美的将中文读出。因为这是以字符的形式读出。</p>
<h2 id="4_u3001FileWriter"><a href="#4_u3001FileWriter" class="headerlink" title="4、FileWriter"></a>4、FileWriter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileWriter</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fw = <span class="keyword">new</span> FileWriter(<span class="string">"e:\\javatest\\8\\heijudy.txt"</span>);</span><br><span class="line">      fw.write(<span class="string">"我的导师叫那英~"</span>);</span><br><span class="line">      fw.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">    	e1.printStackTrace();</span><br><span class="line">      System.out.println(<span class="string">"文件写入错误"</span>);</span><br><span class="line">      System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"文件写入完成"</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个程序如果目标目录下没有这个文件，则会自动创建一个文件。然后把字符串给写进去。<br>FileWriter(path,append):如果第二个参数写为true，则可以向文件后面追加。</p>
<h1 id="u56DB_u3001_u5904_u7406_u6D41"><a href="#u56DB_u3001_u5904_u7406_u6D41" class="headerlink" title="四、处理流"></a>四、处理流</h1><p><img src="http://ww3.sinaimg.cn/large/75544e9fjw1f215819sspj20lo0d60ve.jpg" alt=""></p>
<h2 id="1_u3001_u7F13_u51B2_u6D41_28_u5E26_u5C0F_u6876_u7684_u6D41_29"><a href="#1_u3001_u7F13_u51B2_u6D41_28_u5E26_u5C0F_u6876_u7684_u6D41_29" class="headerlink" title="1、缓冲流(带小桶的流)"></a>1、缓冲流(带小桶的流)</h2><h3 id="281_29_u3001BufferedInputStream_u3001BufferedOutputStream"><a href="#281_29_u3001BufferedInputStream_u3001BufferedOutputStream" class="headerlink" title="(1)、BufferedInputStream、BufferedOutputStream"></a>(1)、BufferedInputStream、BufferedOutputStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBufferStream1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			FileInputStream fis = <span class="keyword">new</span> FileInputStream(</span><br><span class="line">					<span class="string">"e:\\javatest\\8\\io\\test.java"</span>);</span><br><span class="line">			BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">			<span class="comment">//BufferedInputStream bis = new BufferedInputStream(fis,5);</span></span><br><span class="line">			<span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">			System.out.println(bis.read());</span><br><span class="line">			System.out.println(bis.read());</span><br><span class="line">			bis.mark(<span class="number">2</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span> &amp;&amp; (c = bis.read()) != -<span class="number">1</span>; i++) &#123;</span><br><span class="line">				System.out.print((<span class="keyword">char</span>) c + <span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">			bis.reset();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span> &amp;&amp; (c = bis.read()) != -<span class="number">1</span>; i++) &#123;</span><br><span class="line">				System.out.print((<span class="keyword">char</span>) c + <span class="string">" "</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			bis.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/large/75544e9fjw1f215glij66j20ru0cgjsm.jpg" alt=""></p>
<p>BufferedInputStream.mark(int readlimit)<br>意思是：</p>
<pre><code>标记当前位置，在后面读取readlimit个字节之前有效。
</code></pre><p><strong>但实际中并不是这样！！！</strong></p>
<p>实际中是这样的：</p>
<blockquote>
<ul>
<li>当BufferedInputStream调用了mark(不管这里是几)后，后面读取的字节数如果超过了流的Size，则这个标记失效。代码中设置的Size=5的BufferedInputStream证实了这个。</li>
</ul>
</blockquote>
<h3 id="282_29_u3001BufferedWriter_u3001BufferedReader"><a href="#282_29_u3001BufferedWriter_u3001BufferedReader" class="headerlink" title="(2)、BufferedWriter、BufferedReader"></a>(2)、BufferedWriter、BufferedReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBufferStream2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(</span><br><span class="line">					<span class="string">"e:/javatest/8/我的家在东北.txt"</span>));</span><br><span class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(</span><br><span class="line">					<span class="string">"e:/javatest/8/我的家在东北.txt"</span>));</span><br><span class="line">			String s = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">				s = String.valueOf(Math.random());</span><br><span class="line">				bw.write(s);</span><br><span class="line">				bw.newLine();<span class="comment">//写一个换行符</span></span><br><span class="line">			&#125;</span><br><span class="line">			bw.flush();</span><br><span class="line">			<span class="keyword">while</span> ((s = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				System.out.println(s);</span><br><span class="line">			&#125;</span><br><span class="line">			bw.close();</span><br><span class="line">			br.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/75544e9fjw1f215t4p55xj211s0ezwh0.jpg" alt=""></p>
<blockquote>
<ul>
<li><p>BufferedWriter.newLine()//写一个换行符</p>
</li>
<li><p>BufferedWriter.write(String s,int off,int len)//写一个字符串s，从off写len个字符。off和len可以缺省，那么就写整个s。也有写字符数组的方法，类似。</p>
</li>
<li><p>有一个很好用的方法：<br>BufferedReader.readLine()//读一行内容<br>它可以直接读出一行内容，即便是为了这个方法，也值得在其他流上套一个BufferedReader</p>
</li>
</ul>
</blockquote>
<h2 id="2_u3001_u8F6C_u6362_u6D41"><a href="#2_u3001_u8F6C_u6362_u6D41" class="headerlink" title="2、转换流"></a>2、转换流</h2><p>转换流概念图片</p>
<h3 id="281_29_u3001OutputStreamWriter"><a href="#281_29_u3001OutputStreamWriter" class="headerlink" title="(1)、OutputStreamWriter"></a>(1)、OutputStreamWriter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransForm1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(</span><br><span class="line">					<span class="keyword">new</span> FileOutputStream(<span class="string">"e:\\javatest\\8\\io\\char.txt"</span>));</span><br><span class="line">			osw.write(<span class="string">"mircosoft ibm sun apple hp"</span>);</span><br><span class="line">			<span class="comment">// osw.getEncoding()拿到这个字符编码</span></span><br><span class="line">			System.out.println(osw.getEncoding());</span><br><span class="line">			osw.close();</span><br><span class="line">			osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">					<span class="string">"e:\\javatest\\8\\io\\char.txt"</span>, <span class="keyword">true</span>), <span class="string">"GBK"</span>); <span class="comment">// latin-1</span></span><br><span class="line"></span><br><span class="line">			osw.write(<span class="string">"    mircosoft ibm sun apple hp"</span>);</span><br><span class="line">			<span class="comment">// osw.write("    mircosoft ibm sun apple hp", 3, 2);</span></span><br><span class="line">			System.out.println(osw.getEncoding());</span><br><span class="line">			osw.close();</span><br><span class="line"></span><br><span class="line">			InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">					<span class="string">"e:\\javatest\\8\\io\\char.txt"</span>));</span><br><span class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">			String s;</span><br><span class="line">			s = br.readLine();</span><br><span class="line">			System.out.println(s);</span><br><span class="line">			br.close();</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e2) &#123;</span><br><span class="line">			System.out.println(<span class="string">"找不到指定文件"</span>);</span><br><span class="line">			System.exit(-<span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"FINISH"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>图片：大管道套小管道<br>OutputStreamWriter.write(String str,int off,int len):可以写一个字符串从off开始len个字符。<br>off和len可以缺省，那么默认写全部str。<br>代码中的： osw.write(“    mircosoft ibm sun apple hp”, 3, 2);证实了这个。</p>
<h3 id="282_29_u3001InputStreamReader"><a href="#282_29_u3001InputStreamReader" class="headerlink" title="(2)、InputStreamReader"></a>(2)、InputStreamReader</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransForm2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">		InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">		String s = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			s = br.readLine();</span><br><span class="line">			<span class="keyword">while</span> (s != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (s.equalsIgnoreCase(<span class="string">"exit"</span>))</span><br><span class="line">					<span class="comment">//如果s的内容是"exit",进来</span></span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				System.out.println(s.toUpperCase());</span><br><span class="line">				<span class="comment">//toUpperCase()把小写转换成大写</span></span><br><span class="line">				s = br.readLine();</span><br><span class="line">			&#125;</span><br><span class="line">			br.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>//System.in是个阻塞式的流，如果你没有输入，它就傻傻的等待~<br>图片：三个管道，读字节&gt;读字符&gt;读一行字符串</p>
<h2 id="3_u3001_u6570_u636E_u6D41"><a href="#3_u3001_u6570_u636E_u6D41" class="headerlink" title="3、数据流"></a>3、数据流</h2><p>图片：概念</p>
<h3 id="281_29_u3001DataInputStream_u3001DataOutputStream"><a href="#281_29_u3001DataInputStream_u3001DataOutputStream" class="headerlink" title="(1)、DataInputStream、DataOutputStream"></a>(1)、DataInputStream、DataOutputStream</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataStream</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * ByteArrayOutputStream 的创建完成了2个操作：</span><br><span class="line">		 * 一、在内存中分配了一个字节数组（即：缓冲区）</span><br><span class="line">		 * 二、一根流管道怼在了这个字节数组上</span><br><span class="line">		 */</span></span><br><span class="line">		ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">		<span class="comment">// 在baos管道上再套接一层管道dos</span></span><br><span class="line">		DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">/**</span><br><span class="line">			 * 向这个流dos里面写了一个double，一个boolean</span><br><span class="line">			 *</span><br><span class="line">			 * 实际上是先把这两个数据写到了刚才在内存中分配</span><br><span class="line">			 * 的字节数组（缓冲区）中暂时保存起来</span><br><span class="line">			 */</span></span><br><span class="line">			dos.writeDouble(Math.random());</span><br><span class="line">			dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">			<span class="comment">/**</span><br><span class="line">			 * 创建一个字节数组输入流，将输出流的字节数组（缓冲区）</span><br><span class="line">			 * 的内容以字节数组的形式返回</span><br><span class="line">			 */</span></span><br><span class="line">			ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(</span><br><span class="line">					baos.toByteArray());</span><br><span class="line">			<span class="comment">// 可从此流中读取的剩余字节数</span></span><br><span class="line">			System.out.println(bais.available());</span><br><span class="line">			<span class="comment">// 套在一个流上</span></span><br><span class="line">			DataInputStream dis = <span class="keyword">new</span> DataInputStream(bais);</span><br><span class="line">			<span class="comment">// 读取一个double，一个boolean</span></span><br><span class="line">			<span class="comment">/**</span><br><span class="line">			 * 正确的read的顺序应该和write的顺序相同。</span><br><span class="line">			 * 如果相反，则会产生错误。</span><br><span class="line">			 * “先写先读”-----先进先出-----队列</span><br><span class="line">			 */</span></span><br><span class="line">			System.out.println(dis.readDouble());</span><br><span class="line">			System.out.println(dis.readBoolean());</span><br><span class="line">			<span class="comment">/**</span><br><span class="line">			 * 关闭后，字符数组消失，管道都消失</span><br><span class="line">			 */</span></span><br><span class="line">			dos.close();</span><br><span class="line">			dis.close();</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4_u3001print_u6D41"><a href="#4_u3001print_u6D41" class="headerlink" title="4、print流"></a>4、print流</h2><p>图片：概念</p>
<h3 id="281_29_u3001PrintStream"><a href="#281_29_u3001PrintStream" class="headerlink" title="(1)、PrintStream"></a>(1)、PrintStream</h3><h4 id="u2460"><a href="#u2460" class="headerlink" title="①"></a>①</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrintStream1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(</span><br><span class="line">					<span class="string">"e:\\javatest\\8\\io\\char.txt"</span>, <span class="keyword">true</span>);</span><br><span class="line">      <span class="comment">//在文件输出流外再套了一层输出流</span></span><br><span class="line">			ps = <span class="keyword">new</span> PrintStream(fos);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">//设置system的输出流为ps</span></span><br><span class="line">			System.setOut(ps);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">"\n中国好声音第四季----周杰伦歌迷见面会~~~~~~~~~~才怪~"</span>);</span><br><span class="line">		ps.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>图片：管道套管道图，把往控制台的输出流设置为自己创建的流。</p>
<h4 id="u2461"><a href="#u2461" class="headerlink" title="②"></a>②</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrintStream2</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String filename = args[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">if</span> (filename != <span class="keyword">null</span>) &#123;</span><br><span class="line">			list(filename, System.out);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">(String f, PrintStream fs)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(f));</span><br><span class="line">			String s = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span> ((s = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				fs.println(s);</span><br><span class="line">			&#125;</span><br><span class="line">			br.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			fs.println(<span class="string">"无法读取文件"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>读取一个参数（文件名），然后输出到控制台</p>
<h3 id="282_29_u3001PrintWriter"><a href="#282_29_u3001PrintWriter" class="headerlink" title="(2)、PrintWriter"></a>(2)、PrintWriter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrintStream3</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String s = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * 一根管道怼到了标准输入上（键盘上）</span><br><span class="line">		 */</span></span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">/**</span><br><span class="line">			 * 后面带true的参数，用于写日志</span><br><span class="line">			 */</span></span><br><span class="line">			FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"e:\\javatest\\8\\io\\char.txt"</span>,</span><br><span class="line">					<span class="keyword">true</span>); <span class="comment">// Log4J</span></span><br><span class="line">			<span class="comment">/**</span><br><span class="line">			 * 又一根管道PrintWriter怼到了FileWriter流上</span><br><span class="line">			 */</span></span><br><span class="line">			PrintWriter log = <span class="keyword">new</span> PrintWriter(fw);</span><br><span class="line">			<span class="comment">/**</span><br><span class="line">			 * br.readLine():此处是从标准输入流中读取一行内容</span><br><span class="line">			 */</span></span><br><span class="line">			<span class="keyword">while</span> ((s = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (s.equalsIgnoreCase(<span class="string">"exit"</span>))</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				System.out.println(s.toUpperCase());</span><br><span class="line">				<span class="comment">/**向指向文件的流里面写数据</span><br><span class="line">				 *</span><br><span class="line">				 */</span></span><br><span class="line">				log.println(<span class="string">"-----"</span>);</span><br><span class="line">				log.println(s.toUpperCase());</span><br><span class="line">				log.flush();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//当写完后，在后面加上日期</span></span><br><span class="line">			log.println(<span class="string">"==="</span> + <span class="keyword">new</span> Date() + <span class="string">"==="</span>);</span><br><span class="line">			<span class="comment">/**</span><br><span class="line">			 * flush()刷新此输出流并强制写出所有缓冲的输出字节</span><br><span class="line">			 */</span></span><br><span class="line">			log.flush();</span><br><span class="line">			log.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5_u3001Object_u6D41"><a href="#5_u3001Object_u6D41" class="headerlink" title="5、Object流"></a>5、Object流</h2><p><strong>直接将Object写入或写出</strong></p>
<blockquote>
<p>*　序列化：把一个Object直接转换为字节流写到硬盘(或者网络)上去。</p>
</blockquote>
<p>Java序列化：</p>
<p>  类通过实现 java.io.Serializable(标记性的接口) 接口以启用其序列化功能。未实现此接口的类将无法使其任何状态序列化或反序列化。可序列化类的所有子类型本身都是可序列化的。<br>  <strong>序列化接口没有方法或字段，仅用于标识可序列化的语义。</strong><br>  类实现Serializable接口，做了标记之后。实质上是告诉编译器，“我可以被序列化，come on~序列化我吧~~”。</p>
<p>关键字transient:<br>修饰变量，在序列化的时候不予考虑(即：往硬盘上写的时候，直接忽视它，当它是透明的)</p>
<p>transient使用小结(原文地址：<a href="http://blog.csdn.net/lanxuezaipiao/article/details/16358677" target="_blank" rel="external">http://blog.csdn.net/lanxuezaipiao/article/details/16358677</a>)<br>1）一旦变量被transient修饰，变量将不再是对象持久化的一部分，该变量内容在序列化后无法获得访问。<br>2）transient关键字只能修饰变量，而不能修饰方法和类。注意，本地变量是不能被transient关键字修饰的。变量如果是用户自定义类变量，则该类需要实现Serializable接口。<br>3）被transient关键字修饰的变量不再能被序列化，一个静态变量不管是否被transient修饰，均不能被序列化。</p>
<h3 id="281_29_u3001ObjectInputStream_u3001ObjectOutputStream"><a href="#281_29_u3001ObjectInputStream_u3001ObjectOutputStream" class="headerlink" title="(1)、ObjectInputStream、ObjectOutputStream"></a>(1)、ObjectInputStream、ObjectOutputStream</h3><p>优点：<br>比DataInputStream、DataOutputStream流更方便，ObjectInputStream、ObjectOutputStream可以直接读写一个Object对象。而不用一个数据一个数据地读写。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObjectIO</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		T t = <span class="keyword">new</span> T();</span><br><span class="line">		t.k = <span class="number">8</span>;</span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * 输出流</span><br><span class="line">		 * 一个管道套一个管道怼在了文件上</span><br><span class="line">		 */</span></span><br><span class="line">		FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"e:\\javatest\\8\\char.txt"</span>);</span><br><span class="line">		ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * ObjectOutputStream.writeObject(Object o)//直接写一个对象进去</span><br><span class="line">		 */</span></span><br><span class="line">		oos.writeObject(t);</span><br><span class="line">		oos.flush();</span><br><span class="line">		oos.close();</span><br><span class="line">		<span class="comment">/**</span><br><span class="line">		 * 输入流</span><br><span class="line">		 * 一个管道套一个管道怼在了文件上</span><br><span class="line">		 */</span></span><br><span class="line">		FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"e:\\javatest\\8\\char.txt"</span>);</span><br><span class="line">		ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">		T tReaded = (T) ois.readObject();</span><br><span class="line">		System.out.println(tReaded.i + <span class="string">" "</span> + tReaded.j + <span class="string">" "</span> + tReaded.d + <span class="string">" "</span></span><br><span class="line">				+ tReaded.k);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">9</span>;</span><br><span class="line">	<span class="keyword">double</span> d = <span class="number">2.3</span>;</span><br><span class="line">	<span class="keyword">transient</span> <span class="keyword">int</span> k = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此例中，变量k被transient修饰，所以不能被序列化。输出tReaded.k的结果为0。</p>
<p>java.io.Externalizable：<br>实现了Serializable接口，对象序列化的过程自动进行，由JVM帮你控制。这TM自己控制不了它怎么序列化的，总感觉不太爽啊(￢_￢)，Java还很人性的提供了Externalizable接口(估计是顾及到了一些程序员的感受(๑•ᴗ•๑))。</p>
<p>其实，<br>public interface Externalizable extends Serializable<br>它是Serializable的子接口<del>~^_^</del>~<br>程序员可以实现里面的<strong>readExternal(ObjectInput in)和writeExternal(ObjectOutput out)</strong>方法，<br>就可以自己控制序列化的过程。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>//有时间再排版吧，累觉不爱 3/18</p>
<h1 id="u4E00_u3001Java_u7684_u6D41_uFF1A"><a href="#u4E00_u3001Java_u7684_u6D41_uFF1A" class="headerlink" title=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[SQL和数据库设计]]></title>
    <link href="http://crazyhoney.github.io/2016/03/17/SQL%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    <id>http://crazyhoney.github.io/2016/03/17/SQL和数据库设计/</id>
    <published>2016-03-17T07:56:41.000Z</published>
    <updated>2016-03-17T09:35:08.076Z</updated>
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>(从mysql入手)<br>先数据库，再表，再有数据</p>
<h2 id="u4E00_u3001_u6570_u636E_u5E93_u7BA1_u7406"><a href="#u4E00_u3001_u6570_u636E_u5E93_u7BA1_u7406" class="headerlink" title="一、数据库管理"></a>一、数据库管理</h2><h3 id="1_u3001_u67E5_u8BE2_u6240_u6709_u6570_u636E_u5E93"><a href="#1_u3001_u67E5_u8BE2_u6240_u6709_u6570_u636E_u5E93" class="headerlink" title="1、查询所有数据库"></a>1、查询所有数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">show</span> <span class="keyword">databases</span></span></span><br></pre></td></tr></table></figure>
<h3 id="2_u3001_u521B_u5EFA_u6570_u636E_u5E93"><a href="#2_u3001_u521B_u5EFA_u6570_u636E_u5E93" class="headerlink" title="2、创建数据库"></a>2、创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名称      <span class="comment">--使用默认字符集</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名称 <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8</span></span><br></pre></td></tr></table></figure>
<h3 id="3_u3001_u67E5_u770B_u6570_u636E_u5E93_u7684_u9ED8_u8BA4_u5B57_u7B26_u96C6"><a href="#3_u3001_u67E5_u770B_u6570_u636E_u5E93_u7684_u9ED8_u8BA4_u5B57_u7B26_u96C6" class="headerlink" title="3、查看数据库的默认字符集"></a>3、查看数据库的默认字符集</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">database</span> 数据库名称</span></span><br></pre></td></tr></table></figure>
<h3 id="4_u3001_u5220_u9664_u6570_u636E_u5E93"><a href="#4_u3001_u5220_u9664_u6570_u636E_u5E93" class="headerlink" title="4、删除数据库"></a>4、删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名称</span></span><br></pre></td></tr></table></figure>
<h3 id="5_u3001_u4FEE_u6539_u6570_u636E_u5E93_u5B57_u7B26_u96C6_u683C_u5F0F"><a href="#5_u3001_u4FEE_u6539_u6570_u636E_u5E93_u5B57_u7B26_u96C6_u683C_u5F0F" class="headerlink" title="5、修改数据库字符集格式"></a>5、修改数据库字符集格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名称 <span class="keyword">default</span> <span class="built_in">character</span> <span class="keyword">set</span> gbk</span></span><br></pre></td></tr></table></figure>
<h2 id="u4E8C_u3001_u8868_u7BA1_u7406"><a href="#u4E8C_u3001_u8868_u7BA1_u7406" class="headerlink" title="二、表管理"></a>二、表管理</h2><h3 id="1_u3001_u67E5_u770B_u6240_u6709_u8868"><a href="#1_u3001_u67E5_u770B_u6240_u6709_u8868" class="headerlink" title="1、查看所有表"></a>1、查看所有表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">show</span> <span class="keyword">tables</span></span></span><br></pre></td></tr></table></figure>
<h3 id="2_u3001_u521B_u5EFA_u8868"><a href="#2_u3001_u521B_u5EFA_u8868" class="headerlink" title="2、创建表"></a>2、创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">create</span> <span class="keyword">table</span> 表名称(</span><br><span class="line">  字段名 字段类型，</span><br><span class="line">  字段名 字段类型(类型长度)</span><br><span class="line">  ...</span><br><span class="line">)</span></span><br></pre></td></tr></table></figure>
<h3 id="3_u3001_u67E5_u770B_u8868_u7ED3_u6784"><a href="#3_u3001_u67E5_u770B_u8868_u7ED3_u6784" class="headerlink" title="3、查看表结构"></a>3、查看表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名</span><br></pre></td></tr></table></figure>
<h3 id="4_u3001_u5220_u9664_u8868"><a href="#4_u3001_u5220_u9664_u8868" class="headerlink" title="4、删除表"></a>4、删除表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span></span><br></pre></td></tr></table></figure>
<h3 id="5_u3001_u4FEE_u6539_u8868"><a href="#5_u3001_u4FEE_u6539_u8868" class="headerlink" title="5、修改表"></a>5、修改表</h3><h4 id="281_29_u3001_u6DFB_u52A0_u5B57_u6BB5"><a href="#281_29_u3001_u6DFB_u52A0_u5B57_u6BB5" class="headerlink" title="(1)、添加字段"></a>(1)、添加字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">column</span> 字段名 字段类型(类型长度)</span></span><br></pre></td></tr></table></figure>
<h4 id="282_29_u3001_u5220_u9664_u5B57_u6BB5"><a href="#282_29_u3001_u5220_u9664_u5B57_u6BB5" class="headerlink" title="(2)、删除字段"></a>(2)、删除字段</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> <span class="keyword">column</span> 字段名</span></span><br></pre></td></tr></table></figure>
<h4 id="284_29_u3001_u4FEE_u6539_u5B57_u6BB5_u7C7B_u578B"><a href="#284_29_u3001_u4FEE_u6539_u5B57_u6BB5_u7C7B_u578B" class="headerlink" title="(4)、修改字段类型"></a>(4)、修改字段类型</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> <span class="keyword">column</span> 字段名 字段类型（类型长度）</span></span><br></pre></td></tr></table></figure>
<h4 id="285_29_u3001_u4FEE_u6539_u5B57_u6BB5_u540D_u79F0"><a href="#285_29_u3001_u4FEE_u6539_u5B57_u6BB5_u540D_u79F0" class="headerlink" title="(5)、修改字段名称"></a>(5)、修改字段名称</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> <span class="keyword">column</span> 字段名 字段类型（类型长度）</span></span><br></pre></td></tr></table></figure>
<h4 id="286_29_u3001_u4FEE_u6539_u8868_u540D_u79F0"><a href="#286_29_u3001_u4FEE_u6539_u8868_u540D_u79F0" class="headerlink" title="(6)、修改表名称"></a>(6)、修改表名称</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">rename</span> <span class="keyword">to</span> 新表名</span></span><br></pre></td></tr></table></figure>
<h3 id="6_u3001_u589E_u5220_u6539_u6570_u636E"><a href="#6_u3001_u589E_u5220_u6539_u6570_u636E" class="headerlink" title="6、增删改数据"></a>6、增删改数据</h3><h2 id="u4EE5_u540E_u6709_u65F6_u95F4_u518D_u5199_uFF0C_u5E72_u4E0D_u52A8_u4E86_u3002_u5148_u5199_u6570_u636E_u5E93_u8BBE_u8BA1_u7684"><a href="#u4EE5_u540E_u6709_u65F6_u95F4_u518D_u5199_uFF0C_u5E72_u4E0D_u52A8_u4E86_u3002_u5148_u5199_u6570_u636E_u5E93_u8BBE_u8BA1_u7684" class="headerlink" title="以后有时间再写，干不动了。先写数据库设计的"></a>以后有时间再写，干不动了。先写数据库设计的</h2><hr>
<h1 id="u6570_u636E_u5E93_u8BBE_u8BA1"><a href="#u6570_u636E_u5E93_u8BBE_u8BA1" class="headerlink" title="数据库设计"></a>数据库设计</h1><p>键：一个属性或多个属性组合<br>候选键：用来唯一标识一条元组。（一个关系可以有多个）<br>主键：所有候选键拿出来用的键。（一个关系只能有一个）</p>
<h2 id="u4E00_u3001_u8303_u5F0F"><a href="#u4E00_u3001_u8303_u5F0F" class="headerlink" title="一、范式"></a>一、范式</h2><h3 id="u7B2C_u4E00_u8303_u5F0F_281NF_29"><a href="#u7B2C_u4E00_u8303_u5F0F_281NF_29" class="headerlink" title="第一范式(1NF)"></a>第一范式(1NF)</h3><p>条件：关系R的每个属性的值域是不可分割的值。<br>即：要求每个字段必须是不可分割的独立单元</p>
<h3 id="u7B2C_u4E8C_u8303_u5F0F_282NF_29"><a href="#u7B2C_u4E8C_u8303_u5F0F_282NF_29" class="headerlink" title="第二范式(2NF)"></a>第二范式(2NF)</h3><p>条件一：关系R是1NF<br>条件二：关系R的每个<strong>非主属性</strong>都完全依赖于候选键（这种依赖包括传递的依赖）<br>A-&gt;B : A决定B，B依赖A<br>A-&gt;B B-&gt;C : A决定C。C依赖A（B传递了C对A的依赖）</p>
<h3 id="u7B2C_u4E09_u8303_u5F0F_283NF_29"><a href="#u7B2C_u4E09_u8303_u5F0F_283NF_29" class="headerlink" title="第三范式(3NF)"></a>第三范式(3NF)</h3><p>条件一：关系R是2NF<br>条件二：关系R的每个<strong>非主属性</strong>都不传递对候选键的依赖。<br>即：每个非主属性都依赖于某一候选键（这种依赖不包括传递的依赖）</p>
<h3 id="BSCNF_u8303_u5F0F"><a href="#BSCNF_u8303_u5F0F" class="headerlink" title="BSCNF范式"></a>BSCNF范式</h3><p>条件一：关系R是1NF<br>条件二：关系R的每个<strong>属性</strong>都不传递对候选键的依赖。</p>
<p>理解：3NF说的是每个非主属性，而BCNF范式说的是每个属性。<br>因为主属性（主键）可以是属性的组合。所以存在以下情况：<br>存在关系R: (A,B)-&gt;B B-&gt;C  (A,B)是关系的候选键也是主键，B传递了C对于候选键的依赖。<br>所以R不是BCNF。<br>以后再来这个补充例子</p>
<p>2016-03-17 17：03</p>
<hr>
<h2 id="u4E8C_u3001_u5173_u7CFB_u7684_u5BF9_u5E94_u8054_u7CFB"><a href="#u4E8C_u3001_u5173_u7CFB_u7684_u5BF9_u5E94_u8054_u7CFB" class="headerlink" title="二、关系的对应联系"></a>二、关系的对应联系</h2><h3 id="1_u3001_u4E00_u5BF9_u4E00_u8054_u7CFB_281_3A1_29"><a href="#1_u3001_u4E00_u5BF9_u4E00_u8054_u7CFB_281_3A1_29" class="headerlink" title="1、一对一联系(1:1)"></a>1、一对一联系(1:1)</h3><p>一个关系的一条元组唯一对另一个关系的一条元组。</p>
<blockquote>
<ul>
<li>两个关系的联系实质是在看两个关系的同名属性上的值的对应联系。</li>
</ul>
</blockquote>
<p><strong>两个关系通过候选键属性进行关联</strong></p>
<h3 id="2_u3001_u4E00_u5BF9_u591A_u8054_u7CFB_281_3An_29"><a href="#2_u3001_u4E00_u5BF9_u591A_u8054_u7CFB_281_3An_29" class="headerlink" title="2、一对多联系(1:n)"></a>2、一对多联系(1:n)</h3><p>一个关系的一条元组对应另一个关系的多条元组<br>条件：1）两个关系有同名属性<br>      2）一方的同名属性一定是候选键<br>         多方的同名属性一定不是候选键（是外键）<br>外键：连个关系在关联时，多方的同名属性。<br>    作用：保证两个关系的关联。</p>
<h3 id="3_u3001_u591A_u5BF9_u591A_u8054_u7CFB_28m_3An_29"><a href="#3_u3001_u591A_u5BF9_u591A_u8054_u7CFB_28m_3An_29" class="headerlink" title="3、多对多联系(m:n)"></a>3、多对多联系(m:n)</h3><blockquote>
<p><em>　两个关系必然没有同名属性，且不可将一方主键加到另一方作外键。
</em>　两个关系分别向对方是一对多。</p>
</blockquote>
<p><strong>解决多对多联系：</strong></p>
<blockquote>
<ul>
<li>产生第三方联系表。</li>
</ul>
</blockquote>
<p>第三方表：</p>
<p>a)包含两个多方候选键（主键）</p>
<p>b)主键：包含两个多方表的主键</p>
<p>c)外键：两个，分别是两个多方表的主键</p>
<blockquote>
<ul>
<li>将一个多对多(m:n)——&gt;两个一对多(1:n)</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>(从mysql入手)<br>先数据库，再表，再有数据</p>
<h2 id="u4E00_u3001_u6570_u636E_u5E]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java线程复习]]></title>
    <link href="http://crazyhoney.github.io/2016/03/17/Java%E7%BA%BF%E7%A8%8B%E5%A4%8D%E4%B9%A0/"/>
    <id>http://crazyhoney.github.io/2016/03/17/Java线程复习/</id>
    <published>2016-03-17T03:06:14.000Z</published>
    <updated>2016-03-17T09:47:59.497Z</updated>
    <content type="html"><![CDATA[<h2 id="join_28_29_u64CD_u4F5C_uFF1A"><a href="#join_28_29_u64CD_u4F5C_uFF1A" class="headerlink" title="join()操作："></a>join()操作：</h2><p>在主程序中，线程.join()操作，会使主程序（主线程）等待线程执行结束才继续向下执行。<br><strong>相当于方法调用</strong>。</p>
<h2 id="yield_28_29_u64CD_u4F5C_uFF1A"><a href="#yield_28_29_u64CD_u4F5C_uFF1A" class="headerlink" title="yield()操作："></a>yield()操作：</h2><p>当在这个线程中调用了yield()之后，当前线程会让出CPU资源一小会，让别的线程去执行。</p>
<p>举例&lt;(￣︶￣)&gt;:</p>
<p>你在厕所坑位前准备上厕所，来了一个人急的马上要拉到裤子上了。你调用一下yield(),说：“你先来吧，我先让你上厕所！”</p>
<h2 id="synchronized_u64CD_u4F5C"><a href="#synchronized_u64CD_u4F5C" class="headerlink" title="synchronized操作"></a>synchronized操作</h2><h3 id="synchronized_u65B9_u6CD5_uFF1A"><a href="#synchronized_u65B9_u6CD5_uFF1A" class="headerlink" title="synchronized方法："></a>synchronized方法：</h3><p>在执行这个方法的过程中，当前对象被锁定。其他线程不能访问该对象的synchronized方法。<br>但是，其他线程去访问，当前对象所在类的其他对象时，却没有限制。因为是该对象呗上锁，其他对象并没有。</p>
<blockquote>
<p>*如果两个线程要执行一个类中的synchronized方法，并且两个线程使用相同的实例来调用方法，那么一次只能有一个线程能够执行方法，另一个需要等待，直到锁被释放。</p>
</blockquote>
<p><strong>也就是说：如果一个线程在对象上获得一个锁，就没有任何其他线程可以进入（该对象的）类中的任何一个同步方法。</strong><br>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * TestSynchronized2.java</span><br><span class="line"> *</span><br><span class="line"> *  Created on: 2016年3月16日 下午8:25:11</span><br><span class="line"> *      Author: Wayne 13186259527@163.com</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@author</span> Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSynchronized2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="comment">//Thread.sleep(2000);</span></span><br><span class="line">		System.out.println(<span class="string">"================"</span>);</span><br><span class="line">		System.out.println(<span class="string">"我进入了m1()"</span>);</span><br><span class="line"></span><br><span class="line">		b = <span class="number">1000</span>;</span><br><span class="line">		System.out.println(<span class="string">"我在m1()"</span>);</span><br><span class="line">		Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">		System.out.println(<span class="string">"我等了5秒"</span>);</span><br><span class="line">		System.out.println(<span class="string">"m1:b = "</span> + b);</span><br><span class="line">		System.out.println(<span class="string">"我离开了m1()"</span>);		</span><br><span class="line">		System.out.println(<span class="string">"================"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"================"</span>);</span><br><span class="line">		System.out.println(<span class="string">"我进入了m2()"</span>);</span><br><span class="line">		Thread.sleep(<span class="number">5500</span>);</span><br><span class="line">		System.out.println(<span class="string">"我等了5.5秒"</span>);</span><br><span class="line">		System.out.println(<span class="string">"我在m2()"</span>);</span><br><span class="line">		b = <span class="number">2000</span>;</span><br><span class="line">		System.out.println(<span class="string">"m2: b= "</span>+b);</span><br><span class="line">		System.out.println(<span class="string">"我离开了m2()"</span>);</span><br><span class="line">		System.out.println(<span class="string">"================"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			m1();</span><br><span class="line">		&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		TestSynchronized2 tt = <span class="keyword">new</span> TestSynchronized2();</span><br><span class="line">		Thread t = <span class="keyword">new</span> Thread(tt);</span><br><span class="line">		t.start();</span><br><span class="line"></span><br><span class="line">		tt.m2();</span><br><span class="line">		System.out.println(<span class="string">"tt.b="</span>+tt.b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="u7ED3_u679C_uFF1A"><a href="#u7ED3_u679C_uFF1A" class="headerlink" title="结果："></a>结果：</h2><p><img src="http://ww2.sinaimg.cn/large/75544e9fjw1f1z1sa3pybj205j09t0u7.jpg" alt=""></p>
<p>同一个对象的2个线程去分别访问该对象的两个synchronized方法，结果是一个执行结束后，再执行另外一个。印证了上面的说法。</p>
<h3 id="synchronized_u5757_uFF1A"><a href="#synchronized_u5757_uFF1A" class="headerlink" title="synchronized块："></a>synchronized块：</h3><p>在执行当前代码块过程中，当前代码块被锁定，其他线程不能访问这个代码块。<br>但是其他的部分（<strong>未被synchronized(this)修饰的代码</strong>）可以被其他线程访问。（亲测有效）<br>以下例子测试未被synchronized(this)修饰的代码是否可以被其他线程访问</p>
<blockquote>
<ul>
<li>主线程开启了一个t的线程，调用（被synchronized修饰的）m1()。在里面sleep()5秒钟。然后把b赋为1000。</li>
<li>主线程自己调用该类中（未被synchronized修饰的）m2()，把b赋为2000。</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * TestSynchronized.java</span><br><span class="line"> *</span><br><span class="line"> *  Created on: 2016年3月16日 下午8:02:40</span><br><span class="line"> *      Author: Wayne 13186259527@163.com</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@author</span> Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSynchronized</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">		b = <span class="number">1000</span>;</span><br><span class="line">		System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		b = <span class="number">2000</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			m1();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		TestSynchronized tt = <span class="keyword">new</span> TestSynchronized();</span><br><span class="line">		Thread t = <span class="keyword">new</span> Thread(tt);</span><br><span class="line">		t.start();</span><br><span class="line"></span><br><span class="line">		tt.m2();</span><br><span class="line">		System.out.println(tt.b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果如下：</strong></p>
<p><img src="http://ww4.sinaimg.cn/large/75544e9fjw1f1yyyt6bkbj206g0510t8.jpg" alt=""></p>
<p>证实：未被synchronized修饰的代码，可以在<strong>被加锁的代码执行时</strong>可以被其他线程访问。</p>
<h2 id="sleep_28_29_u64CD_u4F5C"><a href="#sleep_28_29_u64CD_u4F5C" class="headerlink" title="sleep()操作"></a>sleep()操作</h2><p>在程序中Thread.sleep(<strong>毫秒</strong>)<br>可以让程序睡眠<strong>毫秒</strong>的时长。</p>
<h3 id="u4F46_u662F"><a href="#u4F46_u662F" class="headerlink" title="但是"></a>但是</h3><p>如果是在synchronized修饰的代码块（或者方法）中，有sleep操作，当前的锁不会被释放。知道被锁定的代码块（或者方法）执行完毕，锁才会被释放。</p>
<p><strong>即：sleep():睡着了，仍然抱着锁。</strong></p>
<h2 id="wait_28_29_u64CD_u4F5C"><a href="#wait_28_29_u64CD_u4F5C" class="headerlink" title="wait()操作"></a>wait()操作</h2><p>这是java.lang.object类里面的操作，换句话说：这是所有类的老祖宗拥有的方法，所以所有对象都可以调用这个方法。</p>
<blockquote>
<ul>
<li>例如：<br>this.wait();<br>表示：在当前的正在访问这个对象的线程wait。</li>
<li>wait()之后，之前此线程拥有的锁，就不在归它所有了。锁被释放了。</li>
</ul>
</blockquote>
<h2 id="u5F3A_u8C03_uFF1A"><a href="#u5F3A_u8C03_uFF1A" class="headerlink" title="强调："></a>强调：</h2><p><strong>wait()操作必须和synchronized()一起使用。</strong></p>
<p>即，这个线程只有拥有了一把锁（锁方法，或者锁代码块），才可以wait()。<br>在代码层面：wait()方法必须在synchronized(){…}语句块内被调用。</p>
<h2 id="notify_28_29_u64CD_u4F5C"><a href="#notify_28_29_u64CD_u4F5C" class="headerlink" title="notify()操作"></a>notify()操作</h2><p>this.notify()：叫醒一个正在当前对象上wait的线程。</p>
<blockquote>
<ul>
<li>notify()和wait()一般是一一对应的。</li>
</ul>
</blockquote>
<h2 id="notifyAll_28_29_u64CD_u4F5C"><a href="#notifyAll_28_29_u64CD_u4F5C" class="headerlink" title="notifyAll()操作"></a>notifyAll()操作</h2><p>this.notifyAll()：叫醒当前wait在此对象上的所有线程。</p>
<p><strong>但是：例如有3个线程A,B,C wait()在该对象上，调用了notifyAll()后，也只有一个线程获得锁继续执行，等它执行完后，其他2个才一个一个地执行（其中的顺序应该是由JVM决定的）</strong></p>
<h3 id="u4EE5_u4E0B_u662F_u5F15_u7528_u4E00_u4E2A_u4EC1_u5144_u5728_u767E_u5EA6_u4E0A_u7684_u56DE_u7B54_uFF0C_u89C9_u5F97_u5F88_u6709_u9053_u7406_uFF1A"><a href="#u4EE5_u4E0B_u662F_u5F15_u7528_u4E00_u4E2A_u4EC1_u5144_u5728_u767E_u5EA6_u4E0A_u7684_u56DE_u7B54_uFF0C_u89C9_u5F97_u5F88_u6709_u9053_u7406_uFF1A" class="headerlink" title="以下是引用一个仁兄在百度上的回答，觉得很有道理："></a>以下是引用一个仁兄在百度上的回答，觉得很有道理：</h3><hr>
<p><strong>调用notifyAll通知所有线程继续执行，只能有一个线程在执行其余的线程在等待(因为在所有线程被唤醒的时候在synchornized块中)。这时的等待和调用notifyAll前的等待是不一样的。</strong></p>
<p><strong>notifyAll前：在对象上休息区内休息</strong></p>
<p><strong>notifyAll后：在排队等待获得对象锁。</strong></p>
<p><strong>notify和notifyAll都是把某个对象上休息区内的线程唤醒,notify只能唤醒一个,但究竟是哪一个不能确定,而notifyAll则唤醒这个对象上的休息室中所有的线程。</strong></p>
<hr>
<h2 id="sleep_28_29_u548Cwait_28_29_u7684_u91CD_u5927_u533A_u522B_uFF1A"><a href="#sleep_28_29_u548Cwait_28_29_u7684_u91CD_u5927_u533A_u522B_uFF1A" class="headerlink" title="sleep()和wait()的重大区别："></a>sleep()和wait()的重大区别：</h2><p><strong>sleep:睡着了，抱着锁</strong></p>
<blockquote>
<p>*　sleep()是Thread类的方法，sleep()执行时，（如果锁定了对象）别的线程不能访问被锁定对象。</p>
</blockquote>
<p><strong>wait: 睡着了，放开锁</strong></p>
<blockquote>
<p>*　wait()是Object类的方法，wait()执行时，（必须是在锁定对象里调用wait）别的线程可以访问被锁定对象。</p>
</blockquote>
<p>场景应用：<br>对于一个数据库文件，读操作是可以让多线程同时访问的(读一下又不会怀孕(๑•ᴗ•๑))，但是写操作应该是要加锁的，否则就会出现数据不一致等问题。</p>
<p>类比：大街上看见一美女，看操作是可以让很多人(多线程)同时看的(又不犯法)，但是搭讪操作应该是要加锁的，否则你让美女跟哪个人说话，美女不就乱套了吗？<br>P.S 当然更不能摸。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="join_28_29_u64CD_u4F5C_uFF1A"><a href="#join_28_29_u64CD_u4F5C_uFF1A" class="headerlink" title="join()操作："></a>join()操作：</h2><p>在主程序]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式（六）]]></title>
    <link href="http://crazyhoney.github.io/2016/03/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://crazyhoney.github.io/2016/03/14/设计模式（六）/</id>
    <published>2016-03-14T09:23:04.000Z</published>
    <updated>2016-03-14T09:55:17.263Z</updated>
    <content type="html"><![CDATA[<h1 id="u7B56_u7565_u6A21_u5F0F"><a href="#u7B56_u7565_u6A21_u5F0F" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="u7B80_u5355_u7684_u8BF4_u5C31_u662F_28_u0E51_u2022_u1D17_u2022_u0E51_29_uFF1A"><a href="#u7B80_u5355_u7684_u8BF4_u5C31_u662F_28_u0E51_u2022_u1D17_u2022_u0E51_29_uFF1A" class="headerlink" title="简单的说就是(๑•ᴗ•๑)："></a>简单的说就是(๑•ᴗ•๑)：</h2><blockquote>
<ul>
<li>有好几个算法（方法）的接口一样，专门让一个类A去操作它，并且把实际的操作封装到A的方法中。</li>
</ul>
</blockquote>
<h2 id="u4E13_u4E1A_u4E00_u70B9_u5C31_u662F-_28_u0E51_26gt_3B_u0602_26lt_3B_u0E51_29_u06F6_uFF1A"><a href="#u4E13_u4E1A_u4E00_u70B9_u5C31_u662F-_28_u0E51_26gt_3B_u0602_26lt_3B_u0E51_29_u06F6_uFF1A" class="headerlink" title="专业一点就是.(๑&gt;؂&lt;๑)۶："></a>专业一点就是.(๑&gt;؂&lt;๑)۶：</h2><blockquote>
<ul>
<li>定义了算法家族，分别封装起来，让它们之间可以相互替换，从模式让算法的变化，不会影响到算法的客户。</li>
</ul>
</blockquote>
<p><img src="http://yun.baozoumanhua.com/Project/RageMaker0/images/0/5.png" alt=""></p>
<p><img src="http://ww4.sinaimg.cn/large/75544e9fjw1f1wj6m43djj20ml0etaby.jpg" alt=""><br><strong>介个问题且听下回分解(✿◡‿◡)</strong></p>
<p><img src="http://jellythink.u.qiniudn.com/jellythinkStrategy.png" alt="Strategy"></p>
<h2 id="u505A_u6CD5"><a href="#u505A_u6CD5" class="headerlink" title="做法"></a>做法</h2><blockquote>
<ul>
<li><strong>Context包含一个Strategy基类的指针，可以指向传入的Strategy子类对象</strong></li>
<li><strong>Context的getResult方法，直接用基类指针调用子类的方法实现功能</strong></li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * Strategy.cpp</span><br><span class="line"> *	策略模式</span><br><span class="line"> *  Created on: 2016年3月14日 下午4:30:31</span><br><span class="line"> *      Author: Wayne 13186259527@163.com</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CashSuper &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">acceptCash</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//原价类</span></span><br><span class="line"><span class="keyword">class</span> CashNormal: <span class="keyword">public</span> CashSuper &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">acceptCash</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> money;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//打折类</span></span><br><span class="line"><span class="keyword">class</span> CashRebate: <span class="keyword">public</span> CashSuper &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">double</span> moneyRebate;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	CashRebate(<span class="keyword">double</span> mR) &#123;</span><br><span class="line">		moneyRebate = mR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">acceptCash</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> money * moneyRebate;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//返现类</span></span><br><span class="line"><span class="keyword">class</span> CashReturn: <span class="keyword">public</span> CashSuper &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">double</span> moneyCondition;</span><br><span class="line">	<span class="keyword">double</span> moneyReturn;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	CashReturn(<span class="keyword">double</span> mC, <span class="keyword">double</span> mR) &#123;</span><br><span class="line">		moneyCondition = mC;</span><br><span class="line">		moneyReturn = mR;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">acceptCash</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">double</span> reult = money;</span><br><span class="line">		<span class="keyword">if</span> (money &gt;= moneyCondition) &#123;</span><br><span class="line">			reult = money - <span class="built_in">floor</span>((money / moneyCondition)) * moneyReturn;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> reult;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//具体的操作类</span></span><br><span class="line"><span class="keyword">class</span> Context &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	CashSuper *cs;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Context(CashSuper * CS) &#123;</span><br><span class="line">		cs = CS;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">GetResult</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cs-&gt;acceptCash(money);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	Context *c = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">int</span> choice;</span><br><span class="line">	<span class="keyword">double</span> money;</span><br><span class="line">	<span class="keyword">double</span> result;</span><br><span class="line">	<span class="comment">//printf("hello\n");</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入金额（&gt;0）：\n"</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; money;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入打折方式："</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"1------原价"</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"2------打八折"</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"3------满300返100"</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; choice;</span><br><span class="line">		<span class="keyword">if</span> (choice == <span class="number">1</span> || choice == <span class="number">2</span> || choice == <span class="number">3</span>) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"输入有误，请输入1、2和3中任一数字"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		c = <span class="keyword">new</span> Context(<span class="keyword">new</span> CashNormal());</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		c = <span class="keyword">new</span> Context(<span class="keyword">new</span> CashRebate(<span class="number">0.8</span>));</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		c = <span class="keyword">new</span> Context(<span class="keyword">new</span> CashReturn(<span class="number">300</span>, <span class="number">100</span>));</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	result = c-&gt;GetResult(money);</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"result = "</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u7B56_u7565_u6A21_u5F0F"><a href="#u7B56_u7565_u6A21_u5F0F" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="u7B80_u5355_u7684_u]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式（五）]]></title>
    <link href="http://crazyhoney.github.io/2016/03/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://crazyhoney.github.io/2016/03/14/设计模式（五）/</id>
    <published>2016-03-14T04:46:43.000Z</published>
    <updated>2016-03-14T08:19:27.239Z</updated>
    <content type="html"><![CDATA[<h1 id="u5355_u4F8B_u6A21_u5F0F"><a href="#u5355_u4F8B_u6A21_u5F0F" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="u7B80_u5355_u7684_u8BF4_u5C31_u662F_28_u0E51_u2022_u1D17_u2022_u0E51_29_uFF1A"><a href="#u7B80_u5355_u7684_u8BF4_u5C31_u662F_28_u0E51_u2022_u1D17_u2022_u0E51_29_uFF1A" class="headerlink" title="简单的说就是(๑•ᴗ•๑)："></a>简单的说就是(๑•ᴗ•๑)：</h2><blockquote>
<ul>
<li>你点一下一个按钮（比如说：帮助-&gt;关于），你再点一次的话，它不会再弹出一个窗口。</li>
<li>类比：<br>  计划生育，让你只能生一个孩子。</li>
</ul>
</blockquote>
<h2 id="u4E13_u4E1A_u4E00_u70B9_u5C31_u662F_28_uFFE2__uFFE2_29_uFF1A"><a href="#u4E13_u4E1A_u4E00_u70B9_u5C31_u662F_28_uFFE2__uFFE2_29_uFF1A" class="headerlink" title="专业一点就是(￢_￢)："></a>专业一点就是(￢_￢)：</h2><blockquote>
<ul>
<li>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li>
</ul>
</blockquote>
<p><img src="http://www.cxyclub.cn/Upload/Images/2013072518/40FF1255E7B9ADFF.png" alt="Singleton"></p>
<h2 id="u505A_u6CD5"><a href="#u505A_u6CD5" class="headerlink" title="做法"></a>做法</h2><blockquote>
<ul>
<li><strong>构造函数私有化（类外不可以调用构造函数，便不可以创建对象）</strong></li>
<li><strong>有一个私有的静态的成员变量（属性），可以是指针、引用或者对象（见“饿汉”）</strong></li>
<li><strong>有一个公有的函数，可以返回一个该类对象（如果有的话直接返回，如果没有则创建）</strong></li>
</ul>
</blockquote>
<h2 id="u61D2_u6C49"><a href="#u61D2_u6C49" class="headerlink" title="懒汉"></a>懒汉</h2><blockquote>
<ul>
<li><strong>顾名思义：需要创建时才创建对象</strong></li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * Singleton.cpp</span><br><span class="line"> *	单例模式</span><br><span class="line"> *  Created on: 2016年3月11日 下午3:38:31</span><br><span class="line"> *      Author: Wayne 13186259527@163.com</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 懒汉：需要创建时才创建对象</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">class</span> Singleton &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">static</span> Singleton * instance;</span><br><span class="line">	Singleton() &#123;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> Singleton * <span class="title">GetInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (instance == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">//懒汉，进入函数后判断是否创建，如果未创建则创建对象</span></span><br><span class="line">			instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这里不创建</span></span><br><span class="line">Singleton* Singleton::instance = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//懒汉</span></span><br><span class="line">	Singleton * s1 = Singleton::GetInstance();</span><br><span class="line">	Singleton * s2 = Singleton::GetInstance();</span><br><span class="line">	<span class="keyword">if</span> (s1 == s2) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"s1 == s2"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u997F_u6C49"><a href="#u997F_u6C49" class="headerlink" title="饿汉"></a>饿汉</h2><blockquote>
<ul>
<li><strong>顾名思义：从一开始加载的时候就创建对象</strong></li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * singleton2.cpp</span><br><span class="line"> *	单例模式  饿汉</span><br><span class="line"> *  Created on: 2016年3月11日 下午4:24:03</span><br><span class="line"> *      Author: Wayne 13186259527@163.com</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">class</span> singleton &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">static</span> singleton* instance;</span><br><span class="line">	singleton() &#123;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> singleton* <span class="title">GetInstace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//饿汉，直接返回已经创建好的对象</span></span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这里直接创建</span></span><br><span class="line">singleton* singleton::instance = <span class="keyword">new</span> singleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	singleton* s1 = singleton::GetInstace();</span><br><span class="line">	singleton* s2 = singleton::GetInstace();</span><br><span class="line">	<span class="keyword">if</span> (s1 == s2) &#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"s1 == s2"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="u5355_u4F8B_u6A21_u5F0F"><a href="#u5355_u4F8B_u6A21_u5F0F" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="u7B80_u5355_u7684_u]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式（四）]]></title>
    <link href="http://crazyhoney.github.io/2016/03/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://crazyhoney.github.io/2016/03/13/设计模式（四）/</id>
    <published>2016-03-13T13:41:52.000Z</published>
    <updated>2016-03-14T01:18:06.369Z</updated>
    <content type="html"><![CDATA[<h2 id="u9002_u914D_u5668_u6A21_u5F0F"><a href="#u9002_u914D_u5668_u6A21_u5F0F" class="headerlink" title="适配器模式"></a>适配器模式</h2><h2 id="u7B80_u5355_u7684_u8BF4_u5C31_u662F_28_u0E51_u2022_u1D17_u2022_u0E51_29_uFF1A"><a href="#u7B80_u5355_u7684_u8BF4_u5C31_u662F_28_u0E51_u2022_u1D17_u2022_u0E51_29_uFF1A" class="headerlink" title="简单的说就是(๑•ᴗ•๑)："></a>简单的说就是(๑•ᴗ•๑)：</h2><p>电源适配器（把220V的交流电转换为电器能够使用的电压）</p>
<h2 id="u4E13_u4E1A_u4E00_u70B9_u5C31_u662F_28_u2299_u02CD_u2299_29_uFF1A"><a href="#u4E13_u4E1A_u4E00_u70B9_u5C31_u662F_28_u2299_u02CD_u2299_29_uFF1A" class="headerlink" title="专业一点就是(⊙ˍ⊙)："></a>专业一点就是(⊙ˍ⊙)：</h2><p>想复用一些现成的类，但是接口又与复用环境要求不一致。那么使用适配器转换接口。</p>
<hr>
<h2 id="1_u3001_u7C7B_u9002_u914D_u5668"><a href="#1_u3001_u7C7B_u9002_u914D_u5668" class="headerlink" title="1、类适配器"></a>1、类适配器</h2><ul>
<li>[x] 适用于C++（因为它支持多继承）</li>
</ul>
<p><img src="http://www.myexception.cn/img/2012/09/10/111548767.jpg" alt="ClassAdapter"></p>
<h2 id="u9002_u914D_u5668_u7C7B_u7EE7_u627F_u4E86Target_u548CAdaptee_u7684_u65B9_u6CD5_uFF0C_u6240_u4EE5_u53EF_u4EE5_u76F4_u63A5_u5728_u65B9_u6CD5_u4E2D_u8C03_u7528Adaptee_u7684_u65B9_u6CD5_uFF0C_u5B9E_u73B0_u63A5_u53E3_u7684_u8F6C_u6362"><a href="#u9002_u914D_u5668_u7C7B_u7EE7_u627F_u4E86Target_u548CAdaptee_u7684_u65B9_u6CD5_uFF0C_u6240_u4EE5_u53EF_u4EE5_u76F4_u63A5_u5728_u65B9_u6CD5_u4E2D_u8C03_u7528Adaptee_u7684_u65B9_u6CD5_uFF0C_u5B9E_u73B0_u63A5_u53E3_u7684_u8F6C_u6362" class="headerlink" title="<strong>适配器类继承了Target和Adaptee的方法，所以可以直接在方法中调用Adaptee的方法，实现接口的转换</strong>"></a><strong>适配器类继承了Target和Adaptee的方法，所以可以直接在方法中调用Adaptee的方法，实现接口的转换</strong></h2><h2 id="2_u3001_u5BF9_u8C61_u9002_u914D_u5668"><a href="#2_u3001_u5BF9_u8C61_u9002_u914D_u5668" class="headerlink" title="2、对象适配器"></a>2、对象适配器</h2><p><img src="http://www.myexception.cn/img/2012/06/25/1359217096.png" alt="ObjectAdapter"></p>
<h2 id="u9002_u914D_u5668_u7C7B_u7EE7_u627F_u4E86Target_u7684_u65B9_u6CD5_uFF0C_u5E76_u4E14_u542B_u6709Adaptee_u7684_u5BF9_u8C61_uFF08_u6216_u8005_u6307_u9488_uFF09_u3002_u53EF_u4EE5_u518D_u65B9_u6CD5_u4E2D_u8C03_u7528Adaptee_u7684_u65B9_u6CD5_uFF0C_u5B9E_u73B0_u63A5_u53E3_u8F6C_u6362"><a href="#u9002_u914D_u5668_u7C7B_u7EE7_u627F_u4E86Target_u7684_u65B9_u6CD5_uFF0C_u5E76_u4E14_u542B_u6709Adaptee_u7684_u5BF9_u8C61_uFF08_u6216_u8005_u6307_u9488_uFF09_u3002_u53EF_u4EE5_u518D_u65B9_u6CD5_u4E2D_u8C03_u7528Adaptee_u7684_u65B9_u6CD5_uFF0C_u5B9E_u73B0_u63A5_u53E3_u8F6C_u6362" class="headerlink" title="<strong>适配器类继承了Target的方法，并且含有Adaptee的对象（或者指针）。可以再方法中调用Adaptee的方法，实现接口转换</strong>"></a><strong>适配器类继承了Target的方法，并且含有Adaptee的对象（或者指针）。可以再方法中调用Adaptee的方法，实现接口转换</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * Adapter.cpp</span><br><span class="line"> *</span><br><span class="line"> *  Created on: 2016年3月11日 下午4:48:49</span><br><span class="line"> *      Author: Wayne 13186259527@163.com</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Target &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"我要20V的电压"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Adaptee &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SpecialMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"我这里提供10V的电压"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类适配器</span></span><br><span class="line"><span class="keyword">class</span> ClsAdapter: <span class="keyword">public</span> Target, <span class="keyword">private</span> Adaptee &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"类适配器"</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"你要20V，我给你20V"</span> &lt;&lt; endl;</span><br><span class="line">		SpecialMethod();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"我给你转换为20V"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象适配器</span></span><br><span class="line"><span class="keyword">class</span> ObjAdapter: <span class="keyword">public</span> Target &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	Adaptee ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">/*ObjAdapter(Adaptee ptr)&#123;</span><br><span class="line">	 this-&gt;ptr = ptr;</span><br><span class="line">	 &#125;*/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"对象适配器"</span> &lt;&lt; endl;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"你要20V，我给你20V"</span> &lt;&lt; endl;</span><br><span class="line">		ptr.SpecialMethod();</span><br><span class="line">		<span class="comment">//ptr-&gt;SpecialMethod();</span></span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"我给你转换为20V"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//类适配器</span></span><br><span class="line">	ClsAdapter cls;</span><br><span class="line">	cls.Method();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"=================="</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//对象适配器</span></span><br><span class="line">	ObjAdapter obj;</span><br><span class="line">	obj.Method();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9002_u914D_u5668_u6A21_u5F0F"><a href="#u9002_u914D_u5668_u6A21_u5F0F" class="headerlink" title="适配器模式"></a>适配器模式</h2><h2 id="u7B80]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式（三）]]></title>
    <link href="http://crazyhoney.github.io/2016/03/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://crazyhoney.github.io/2016/03/13/设计模式（三）/</id>
    <published>2016-03-13T13:16:24.000Z</published>
    <updated>2016-03-13T13:27:56.127Z</updated>
    <content type="html"><![CDATA[<h2 id="u62BD_u8C61_u5DE5_u5382_u6A21_u5F0F"><a href="#u62BD_u8C61_u5DE5_u5382_u6A21_u5F0F" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p><img src="http://images0.cnblogs.com/blog2015/686114/201505/162213167201648.png" alt="工厂方法模式UML类图"></p>
<p>我感觉就是工厂方法的增强版，多了更多的操作子类，随之而来的就是更多的抽象工厂子类。每个工厂子类都可以操作对应的操作子类。并且它们使用的是统一的接口。</p>
<h2 id="u53EA_u9700_u8981_u5728_u5BA2_u6237_u7AEF_u66F4_u6362_u62BD_u8C61_u5DE5_u5382_u5B50_u7C7B_uFF0C_u5373_u53EF_u5B9E_u73B0_u4E0D_u540C_u7684_u64CD_u4F5C_u3002"><a href="#u53EA_u9700_u8981_u5728_u5BA2_u6237_u7AEF_u66F4_u6362_u62BD_u8C61_u5DE5_u5382_u5B50_u7C7B_uFF0C_u5373_u53EF_u5B9E_u73B0_u4E0D_u540C_u7684_u64CD_u4F5C_u3002" class="headerlink" title="只需要在客户端更换抽象工厂子类，即可实现不同的操作。"></a>只需要在客户端更换抽象工厂子类，即可实现不同的操作。</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * AbstractFactory.cpp</span><br><span class="line"> *	抽象工厂模式</span><br><span class="line"> *  Created on: 2016年3月11日</span><br><span class="line"> *      Author: Administrator</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> User &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">const</span> <span class="built_in">string</span>&amp; <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> IUser &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(User *user)</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">GetUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> SqlserverUser: <span class="keyword">public</span> IUser &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(User *user)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"在SQL server中给user表增加了一条数据"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">GetUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"在SQL server中根据ID得到user表一条数据"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> AcessUser: <span class="keyword">public</span> IUser &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(User *user)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"在Acess中给user表增加了一条数据"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">GetUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"在Acess中根据ID得到user表一条数据"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Department &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> IDepartment &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Department *deparment)</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">GetDepartment</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> SqlserverDepartment: <span class="keyword">public</span> IDepartment &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Department *deparment)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"在SQL server中给Department表增加了一条数据"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">GetDepartment</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"在SQL server中根据ID得到Department表一条数据"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AcessDepartment: <span class="keyword">public</span> IDepartment &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Department *deparment)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"在Acess中给Department表增加了一条数据"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">GetDepartment</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">"在Acess中根据ID得到Department表一条数据"</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> IFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> IUser * <span class="title">CreateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> IDepartment * <span class="title">CreateDepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> SqlserverFactory: <span class="keyword">public</span> IFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function">IUser * <span class="title">CreateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SqlserverUser();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">IDepartment * <span class="title">CreateDepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SqlserverDepartment();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AcessFactory: <span class="keyword">public</span> IFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="function">IUser * <span class="title">CreateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AcessUser();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">IDepartment * <span class="title">CreateDepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> AcessDepartment();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"helloFactory"</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	User *user = <span class="keyword">new</span> User();</span><br><span class="line">	Department *dep = <span class="keyword">new</span> Department();</span><br><span class="line">	<span class="comment">//在这里传入不同使用的数据库，来实现用不同数据库进行不同的操作。</span></span><br><span class="line">	IFactory *factory = <span class="keyword">new</span> AcessFactory();</span><br><span class="line">	<span class="comment">//IFactory *factory = new SqlserverFactory();</span></span><br><span class="line"></span><br><span class="line">	IUser *iuser = factory-&gt;CreateUser();</span><br><span class="line"></span><br><span class="line">	IDepartment *idep = factory-&gt;CreateDepartment();</span><br><span class="line"></span><br><span class="line">	iuser-&gt;Insert(user);</span><br><span class="line">	iuser-&gt;GetUser(<span class="number">1</span>);</span><br><span class="line">	idep-&gt;Insert(dep);</span><br><span class="line">	idep-&gt;GetDepartment(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u62BD_u8C61_u5DE5_u5382_u6A21_u5F0F"><a href="#u62BD_u8C61_u5DE5_u5382_u6A21_u5F0F" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式（二）]]></title>
    <link href="http://crazyhoney.github.io/2016/03/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://crazyhoney.github.io/2016/03/13/设计模式（二）/</id>
    <published>2016-03-13T12:51:22.000Z</published>
    <updated>2016-03-13T13:14:13.381Z</updated>
    <content type="html"><![CDATA[<h2 id="u5DE5_u5382_u65B9_u6CD5_u6A21_u5F0F"><a href="#u5DE5_u5382_u65B9_u6CD5_u6A21_u5F0F" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p><img src="http://www.myexception.cn/img/2013/03/01/11304490.png" alt="工厂方法模式UML类图"></p>
<h2 id="u548C_u7B80_u5355_u5DE5_u5382_u7684_u4E0D_u540C_u4E4B_u5904_uFF1A"><a href="#u548C_u7B80_u5355_u5DE5_u5382_u7684_u4E0D_u540C_u4E4B_u5904_uFF1A" class="headerlink" title="和简单工厂的不同之处："></a>和简单工厂的不同之处：</h2><p>把逻辑判断从工厂类中移到客户端。<br>工厂类下多了几个子类用来创建对应的进行实际操作的<br>子类对象。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * FactoryMethod.cpp</span><br><span class="line"> *</span><br><span class="line"> *	工厂方法模式</span><br><span class="line"> *  Created on: 2016年3月13日 下午8:56:50</span><br><span class="line"> *      Author: Wayne 13186259527@163.com</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Operation &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">double</span> x, y;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Operation() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	Operation(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">char</span> c) &#123;</span><br><span class="line">		<span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">		<span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">		<span class="keyword">this</span>-&gt;c = c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">GetX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">GetY</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">char</span> <span class="title">GetC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>-&gt;c;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Add: <span class="keyword">public</span> Operation &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Add() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x + y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Sub: <span class="keyword">public</span> Operation &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Sub() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x - y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Mul: <span class="keyword">public</span> Operation &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Mul() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	;</span><br><span class="line">	;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x * y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Div: <span class="keyword">public</span> Operation &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Div() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"0不能作为被除数"</span> &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> x / y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> Operation* <span class="title">CreateOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> AddFactory: <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">Operation* <span class="title">CreateOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Add();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> SubFactory: <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">Operation* <span class="title">CreateOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Sub();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> MulFactory: <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">Operation* <span class="title">CreateOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Mul();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> DivFactory: <span class="keyword">public</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">Operation* <span class="title">CreateOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Div();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world"</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"eg:5+8"</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">double</span> x, y;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; c &gt;&gt; y;</span><br><span class="line">	<span class="keyword">double</span> result;</span><br><span class="line"></span><br><span class="line">	Factory *f = <span class="literal">NULL</span>;<span class="comment">//指向对应的工厂</span></span><br><span class="line">	Operation *p = <span class="literal">NULL</span>;<span class="comment">//指向对应的实现方法的子类</span></span><br><span class="line">	<span class="keyword">switch</span> (c) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">		f = <span class="keyword">new</span> AddFactory();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">		f = <span class="keyword">new</span> SubFactory();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">		f = <span class="keyword">new</span> MulFactory();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">		f = <span class="keyword">new</span> DivFactory();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	p = f-&gt;CreateOperation();</span><br><span class="line">	result = p-&gt;Calc(x, y);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"result = "</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5DE5_u5382_u65B9_u6CD5_u6A21_u5F0F"><a href="#u5DE5_u5382_u65B9_u6CD5_u6A21_u5F0F" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式（一）]]></title>
    <link href="http://crazyhoney.github.io/2016/03/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://crazyhoney.github.io/2016/03/13/设计模式（一）/</id>
    <published>2016-03-13T12:01:34.000Z</published>
    <updated>2016-03-13T13:14:15.017Z</updated>
    <content type="html"><![CDATA[<p>这段时间准备着实习招聘，把以前懂一丢丢的设计模式又拿出来看看，这次看的书，主要是《大话设计模式》，偶尔翻一翻经典的《设计模式》。这几天看的是简单工厂模式、工厂方法模式、抽象工厂模式、策略模式。觉得它们有相似之处，所以在这里写下感想。如有错误，敬请指正（如果有人看的话✧(≖ ◡ ≖✿)）</p>
<p><font size="8">简单工厂模式</font><br><img src="http://img9.ph.126.net/mgguk-eI_Rg0YxQOgS5KQQ==/1089026684910597969.bmp" alt="简单工厂模式UML类图"></p>
<p>①几个子类继承基类的方法，并且各自实现。</p>
<p>②工厂类根据客户端传入的参数，生成对应的子类并且返回客户端。</p>
<p>③客户端定义的基类的指针指向生成的子类，由这个指针去调用具体方法，实现功能</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * EasyFactory.cpp</span><br><span class="line"> *</span><br><span class="line"> *  Created on: 2016年3月11日 下午10:55:57</span><br><span class="line"> *      Author: Wayne 13186259527@163.com</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> 简单工厂模式</span><br><span class="line"> 实现简单的加减乘除</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作基类</span></span><br><span class="line"><span class="keyword">class</span> Operation &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Operation() &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//实现多态的虚函数</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	;</span><br><span class="line"></span><br><span class="line">	~Operation() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Add: <span class="keyword">public</span> Operation &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Add() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x + y;</span><br><span class="line">	&#125;</span><br><span class="line">	~Add() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Sub: <span class="keyword">public</span> Operation &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Sub() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x - y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Mul: <span class="keyword">public</span> Operation &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Mul() &#123;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> x * y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> Div: <span class="keyword">public</span> Operation &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Div() &#123;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">Calc</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (y == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">"0不能作为被除数"</span> &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> x / y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//工厂类</span></span><br><span class="line"><span class="keyword">class</span> Factory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Factory() &#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> Operation * <span class="title">Count</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">		Operation *q = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">switch</span> (c) <span class="comment">//根据传入的符号来判断创建什么子类</span></span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">			q = <span class="keyword">new</span> Add();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">			q = <span class="keyword">new</span> Sub();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">			q = <span class="keyword">new</span> Mul();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">			q = <span class="keyword">new</span> Div();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> q;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入算式："</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"eg:5+8"</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">double</span> x, y;</span><br><span class="line">	<span class="keyword">char</span> c;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; c &gt;&gt; y;</span><br><span class="line">	<span class="keyword">double</span> result;</span><br><span class="line">	Operation *p = Factory::Count(c);</span><br><span class="line">  <span class="comment">//这里将条件传入到Factory的Count静态方法中，返回对应的子类对象</span></span><br><span class="line">	result = p-&gt;Calc(x, y); <span class="comment">//基类指针指向它，调用对应的方法。</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"result = "</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>这段时间准备着实习招聘，把以前懂一丢丢的设计模式又拿出来看看，这次看的书，主要是《大话设计模式》，偶尔翻一翻经典的《设计模式》。这几天看的是简单工厂模式、工厂方法模式、抽象工厂模式、策略模式。觉得它们有相似之处，所以在这里写下感想。如有错误，敬请指正（如果有人看的话✧(≖ ]]>
    </summary>
    
  </entry>
  
</feed>
